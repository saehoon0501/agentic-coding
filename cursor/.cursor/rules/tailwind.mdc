---
description: Tailwind CSS development guidelines
---

# Tailwind CSS Development Guidelines

## Setup and Configuration
- Tailwind CSS v4.1.11 is installed in the project
- Works alongside Material-UI - use strategically to avoid conflicts
- Import Tailwind directives in your main CSS file: `@tailwind base; @tailwind components; @tailwind utilities;`

## Core Principles
- **Utility-first approach**: Build designs using utility classes
- **Responsive design**: Use responsive prefixes (`sm:`, `md:`, `lg:`, `xl:`, `2xl:`)
- **Consistency**: Use Tailwind's design tokens for spacing, colors, and sizing

## Common Utility Patterns

### Layout & Spacing
```jsx
// Flexbox layouts
<div className="flex items-center justify-between">
<div className="flex flex-col space-y-4">

// Grid layouts
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">

// Padding and margins
<div className="p-4 m-2">        // padding: 1rem, margin: 0.5rem
<div className="px-6 py-3">      // padding-x: 1.5rem, padding-y: 0.75rem
```

### Colors and Styling
```jsx
// Background colors
<div className="bg-blue-500 hover:bg-blue-600">
<div className="bg-gradient-to-r from-blue-500 to-purple-600">

// Text colors
<span className="text-gray-800 dark:text-gray-200">
<h1 className="text-3xl font-bold text-center">
```

### Responsive Design
```jsx
// Mobile-first responsive design
<div className="text-sm sm:text-base md:text-lg lg:text-xl">
<div className="hidden md:block">        // Hidden on mobile, visible on desktop
<div className="block md:hidden">        // Visible on mobile, hidden on desktop
```

## Integration with Material-UI
- **Coexistence strategy**: Use Tailwind for layout and spacing, Material-UI for complex components
- **Avoid conflicts**: Don't apply Tailwind classes that override Material-UI component styles
- **Utility classes**: Use Tailwind utilities for margin, padding, and positioning around MUI components

```jsx
// Good: Using Tailwind for layout around MUI components
<div className="flex items-center space-x-4 p-6">
  <Button variant="contained">MUI Button</Button>
  <TextField label="MUI Input" />
</div>

// Avoid: Overriding MUI component internals
<Button className="bg-red-500"> // This conflicts with MUI's styling
```

## Best Practices

### Performance
- Use PurgeCSS configuration to remove unused styles
- Group related utilities: `flex items-center justify-between` instead of scattered classes
- Use `@apply` directive for frequently repeated utility combinations

### Maintainability
- Create component classes for complex repeated patterns:
```css
.btn-primary {
  @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition-colors;
}
```

### Accessibility
- Use semantic HTML with Tailwind classes
- Ensure proper color contrast: `bg-blue-500 text-white`
- Use focus utilities: `focus:ring-2 focus:ring-blue-500 focus:outline-none`

## Common Utility Classes

### Sizing
- `w-full`, `h-full`, `w-1/2`, `h-64`
- `max-w-md`, `max-w-lg`, `max-w-xl`
- `min-h-screen`, `min-w-0`

### Positioning
- `relative`, `absolute`, `fixed`, `sticky`
- `top-0`, `right-0`, `bottom-0`, `left-0`
- `z-10`, `z-20`, `z-50`

### Effects
- `shadow-sm`, `shadow-md`, `shadow-lg`
- `rounded`, `rounded-md`, `rounded-lg`, `rounded-full`
- `transition-all`, `duration-300`, `ease-in-out`

## Project Integration Notes
- Current project uses inline styles in [timeboxTimer.jsx](mdc:cursor/src/timeboxTimer.jsx)
- Consider migrating repetitive inline styles to Tailwind utilities
- Use Tailwind for layout and spacing, Material-UI for interactive components
- Ensure responsive design for timer interface
- Apply consistent spacing and typography throughout the app

## Development Workflow
1. Start with Tailwind utilities for layout and basic styling
2. Use Material-UI components for complex interactive elements
3. Apply responsive design principles from mobile-first
4. Test across different screen sizes
5. Optimize for performance by removing unused styles
